name: Publish Release Package

on:
  release:
    types: [released]
    # types: [edited]

permissions:
  contents: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      language: ${{ steps.validate-release.outputs.lang }}
      version: ${{ steps.validate-release.outputs.version }}
    steps:
      # Checkout
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      -
        id: log-type
        name: Log Type
        run: |
          echo "Event: ${{ github.event.action }}"

      -
        id: validate-release
        name: Update Prerelease 
        uses: actions/github-script@v7
        env:
          RELEASE_NAME: ${{ github.event.release.name }}
        with:
          script: |
            const script = require('./.github/scripts/validate-release.js');
            await script({ github, context, core });

  kotlin-publish:
    name: Publish Kotlin Package
    runs-on: ubuntu-latest
    needs: validate-release
    if: needs.validate-release.outputs.language == 'kotlin'
    steps:
      - id: log-kotlin
        run: |
          echo "KOTLIN PUBLISH: ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY

  typescript-publish:
    name: Publish TypeScript Package
    runs-on: ubuntu-latest
    needs: validate-release
    if: needs.validate-release.outputs.language == 'typescript'
    steps:
      # Checkout
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # ref: ${{ github.event.release.tag_name }}

      - uses: actions/setup-node@v4

      -
        id: configure-git
        name: Configure git
        run: |
          git config user.name "Cole Voss"
          git config user.email "voss.cole@gmail.com"

          # git checkout ${{ github.event.release.tag_name }}
          git checkout main

          # git config user.name "bwell-dev"
          # git config user.email "bwell-dev@icanbwell.com"
      -
        id: tag-current-commit
        name: Tag Current Commit
        env:
          NEW_TAG: ${{ github.event.release.name }}
          VERSION: ${{ needs.validate-release.outputs.version }}
        # TODO:
        # This would also have to commit the changes to version files like package.json
        # The tagging would also be done by npm in the typescript version.
        run: |
          # TODO: This should be updated to correct dir
          cd ./ts-proj
          npm version $VERSION --git-tag-version=false

          # npm publish

          git status --porcelain

          git add -A
          git commit -m "[no ci] Release $VERSION" --no-verify

          git tag -a $NEW_TAG -m "$NEW_TAG Publish Release"
          git push origin main --follow-tags

          echo "New Tag Created for TypeScript Release: $NEW_TAG" >> $GITHUB_STEP_SUMMARY

  re-tag-release:
    name: Retag Github Release
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [validate-release, kotlin-publish, typescript-publish]
    steps:
      # Checkout
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      -
        id: previous-release-tag
        name: Generate Tag
        env:
          LANGUAGE: ${{ needs.validate-release.outputs.language }}
        run: |
          PREV_RELEASE_TAG=$(git for-each-ref refs/tags --sort=-taggerdate --format='%(refname)' | grep -E "$LANGUAGE-sdk-v.*" | grep -v 'rc' | head -n 2 | tail -n 1)
          echo "PREV_RELEASE_TAG=$PREV_RELEASE_TAG" >> "$GITHUB_OUTPUT"

      -
        id: validate-release
        name: Update Prerelease 
        uses: actions/github-script@v7
        env:
          RELEASE_ID: ${{ github.event.release.id }}
          NEW_TAG: ${{ github.event.release.name }}
          PREV_RELEASE_TAG: ${{ steps.previous-release-tag.outputs.PREV_RELEASE_TAG }}
          RELEASE_CONFIG: .github/${{ needs.validate-release.outputs.language }}-release-config.yml
        with:
          script: |
            const script = require('./.github/scripts/retag-release.js');
            await script({ github, context, core });
